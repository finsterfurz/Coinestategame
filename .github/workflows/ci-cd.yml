name: 🚀 CI/CD Pipeline

on:
  push:
    branches: [ main, develop, feature/*, hotfix/* ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

env:
  NODE_VERSION: '18.x'
  CACHE_KEY_PREFIX: 'virtual-building-empire'

jobs:
  # 🧪 Quality checks and testing
  quality-checks:
    name: 🔍 Quality Checks
    runs-on: ubuntu-latest
    outputs:
      cache-key: ${{ steps.cache-keys.outputs.npm }}
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 🔑 Generate cache keys
        id: cache-keys
        run: |
          echo "npm=${{ env.CACHE_KEY_PREFIX }}-npm-${{ hashFiles('**/package-lock.json') }}" >> $GITHUB_OUTPUT

      - name: 📥 Install dependencies
        run: npm ci

      - name: 🔍 Security audit
        run: npm audit --audit-level=moderate
        continue-on-error: true

      - name: 📊 Check for outdated dependencies
        run: npm outdated
        continue-on-error: true

      - name: 🔧 TypeScript type check
        run: npm run type-check

      - name: 🎨 ESLint check
        run: npm run lint

      - name: ✨ Prettier format check
        run: npm run format:check

      - name: 📋 Upload quality reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: quality-reports
          path: |
            eslint-report.json
            audit-report.json
          retention-days: 30

  # 🧪 Unit and integration tests
  test:
    name: 🧪 Tests
    runs-on: ubuntu-latest
    needs: quality-checks
    strategy:
      matrix:
        test-suite: [unit, integration]
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📥 Install dependencies
        run: npm ci

      - name: 🧪 Run tests with coverage
        run: npm run test:coverage
        env:
          CI: true

      - name: 📊 Generate coverage reports
        run: |
          mkdir -p coverage-reports
          cp coverage/lcov.info coverage-reports/lcov-${{ matrix.test-suite }}.info
          cp coverage/coverage-final.json coverage-reports/coverage-${{ matrix.test-suite }}.json

      - name: 📋 Upload coverage reports
        uses: actions/upload-artifact@v4
        with:
          name: coverage-${{ matrix.test-suite }}
          path: coverage-reports/
          retention-days: 30

      - name: 📈 Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage/lcov.info
          flags: ${{ matrix.test-suite }}
          name: codecov-${{ matrix.test-suite }}
          fail_ci_if_error: false

  # 🏗️ Build application
  build:
    name: 🏗️ Build
    runs-on: ubuntu-latest
    needs: [quality-checks, test]
    strategy:
      matrix:
        environment: [production, staging]
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📥 Install dependencies
        run: npm ci

      - name: 🏗️ Build application
        run: npm run build
        env:
          REACT_APP_ENV: ${{ matrix.environment }}
          GENERATE_SOURCEMAP: ${{ matrix.environment == 'production' && 'false' || 'true' }}

      - name: 📊 Analyze bundle size
        run: npm run analyze
        continue-on-error: true

      - name: 📋 Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-${{ matrix.environment }}
          path: build/
          retention-days: 30

      - name: 🗜️ Compress build artifacts
        if: matrix.environment == 'production'
        run: |
          tar -czf build-production.tar.gz build/
          ls -lah build-production.tar.gz

      - name: 📋 Upload compressed build
        if: matrix.environment == 'production'
        uses: actions/upload-artifact@v4
        with:
          name: build-production-compressed
          path: build-production.tar.gz
          retention-days: 90

  # 🔒 Security scanning
  security:
    name: 🔒 Security Scan
    runs-on: ubuntu-latest
    needs: quality-checks
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔍 Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: 📋 Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

      - name: 🔐 Run CodeQL Analysis
        uses: github/codeql-action/analyze@v2
        with:
          languages: javascript

  # 🚀 Deploy to staging
  deploy-staging:
    name: 🚀 Deploy to Staging
    runs-on: ubuntu-latest
    needs: [quality-checks, test, build, security]
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    environment:
      name: staging
      url: https://staging.virtualbuilding.game
    
    steps:
      - name: 📥 Download staging build
        uses: actions/download-artifact@v4
        with:
          name: build-staging
          path: build/

      - name: 🚀 Deploy to Vercel (Staging)
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          working-directory: ./
          alias-domains: staging.virtualbuilding.game

      - name: 🧪 Run staging smoke tests
        run: |
          curl -f https://staging.virtualbuilding.game/health || exit 1
          echo "✅ Staging deployment successful"

  # 🌟 Deploy to production
  deploy-production:
    name: 🌟 Deploy to Production
    runs-on: ubuntu-latest
    needs: [quality-checks, test, build, security]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment:
      name: production
      url: https://virtualbuilding.game
    
    steps:
      - name: 📥 Download production build
        uses: actions/download-artifact@v4
        with:
          name: build-production-compressed

      - name: 🗜️ Extract build artifacts
        run: tar -xzf build-production.tar.gz

      - name: 🚀 Deploy to Vercel (Production)
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          vercel-args: '--prod'
          working-directory: ./
          alias-domains: virtualbuilding.game

      - name: 🧪 Run production smoke tests
        run: |
          curl -f https://virtualbuilding.game/health || exit 1
          echo "✅ Production deployment successful"

      - name: 📊 Performance audit
        run: |
          npx lighthouse-ci autorun --upload.target=filesystem --upload.outputDir=./lighthouse-reports
        continue-on-error: true

      - name: 📋 Upload performance reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: lighthouse-reports
          path: lighthouse-reports/
          retention-days: 30

  # 📊 Post-deployment monitoring
  monitoring:
    name: 📊 Post-Deployment Monitoring
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
      - name: 🔔 Notify deployment success
        uses: 8398a7/action-slack@v3
        if: success()
        with:
          status: success
          text: '🎉 Virtual Building Empire deployed successfully to production!'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: 🚨 Notify deployment failure
        uses: 8398a7/action-slack@v3
        if: failure()
        with:
          status: failure
          text: '❌ Virtual Building Empire deployment failed!'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: 📈 Create deployment tag
        if: success()
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git tag -a "v$(date +%Y%m%d-%H%M%S)" -m "Production deployment $(date)"
          git push origin --tags

  # 🧹 Cleanup
  cleanup:
    name: 🧹 Cleanup
    runs-on: ubuntu-latest
    needs: [deploy-production, deploy-staging]
    if: always()
    
    steps:
      - name: 🗑️ Clean up artifacts
        run: echo "Cleanup job - artifacts will be automatically cleaned up based on retention policies"

      - name: 📊 Job summary
        run: |
          echo "## 🚀 CI/CD Pipeline Summary" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Quality checks completed" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Tests executed" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Security scans performed" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Build artifacts created" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Deployments completed" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "🎮 **Virtual Building Empire** is ready to play!" >> $GITHUB_STEP_SUMMARY
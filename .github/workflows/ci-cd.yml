# ===================================
# 🚀 CI/CD PIPELINE
# ===================================

name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop, enhancement/* ]
  pull_request:
    branches: [ main, develop ]

jobs:
  # ===================================
  # 🧪 TEST JOB
  # ===================================
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18.x, 20.x]
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
    
    - name: 🔧 Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
    
    - name: 📦 Install dependencies
      run: npm ci
    
    - name: 🔍 Type check
      run: npm run type-check
    
    - name: 🧹 Lint code
      run: npm run lint
    
    - name: 🎨 Check formatting
      run: npm run format:check
    
    - name: 🧪 Run tests
      run: npm run test:ci
      env:
        CI: true
    
    - name: 📊 Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      if: matrix.node-version == '20.x'
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        file: ./coverage/lcov.info
        flags: unittests
        name: codecov-umbrella

  # ===================================
  # 🔒 SECURITY AUDIT
  # ===================================
  security:
    name: Security Audit
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
    
    - name: 🔧 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
    
    - name: 📦 Install dependencies
      run: npm ci
    
    - name: 🛡️ Run security audit
      run: npm audit --audit-level=high
    
    - name: 🔍 Run security scan
      run: npm run security

  # ===================================
  # ⛓️ SMART CONTRACT TESTS
  # ===================================
  contracts:
    name: Smart Contract Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
    
    - name: 🔧 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
    
    - name: 📦 Install dependencies
      run: npm ci
    
    - name: 🔨 Compile contracts
      run: npm run compile
    
    - name: 🧪 Test contracts
      run: npm run test:contracts
    
    - name: ⛽ Generate gas report
      run: npm run gas-report
      env:
        REPORT_GAS: true

  # ===================================
  # 🏗️ BUILD JOB
  # ===================================
  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: [test, security]
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
    
    - name: 🔧 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
    
    - name: 📦 Install dependencies
      run: npm ci
    
    - name: 🏗️ Build application
      run: npm run build
      env:
        CI: false  # Treat warnings as warnings, not errors
        GENERATE_SOURCEMAP: false
    
    - name: 📊 Bundle analysis
      run: npm run analyze
    
    - name: 📤 Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: build-files
        path: build/
        retention-days: 30

  # ===================================
  # 🚀 DEPLOY TO STAGING
  # ===================================
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build, contracts]
    if: github.ref == 'refs/heads/develop'
    
    environment:
      name: staging
      url: https://staging.virtualbuilding.game
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
    
    - name: 📤 Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: build-files
        path: build/
    
    - name: 🚀 Deploy to Vercel Staging
      uses: amondnet/vercel-action@v25
      with:
        vercel-token: ${{ secrets.VERCEL_TOKEN }}
        vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
        vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
        scope: ${{ secrets.VERCEL_ORG_ID }}
        alias-domains: staging.virtualbuilding.game

  # ===================================
  # 🌟 DEPLOY TO PRODUCTION
  # ===================================
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build, contracts]
    if: github.ref == 'refs/heads/main'
    
    environment:
      name: production
      url: https://virtualbuilding.game
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
    
    - name: 📤 Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: build-files
        path: build/
    
    - name: 🚀 Deploy to Vercel Production
      uses: amondnet/vercel-action@v25
      with:
        vercel-token: ${{ secrets.VERCEL_TOKEN }}
        vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
        vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
        vercel-args: '--prod'
        scope: ${{ secrets.VERCEL_ORG_ID }}
    
    - name: 📢 Notify Discord
      uses: Ilshidur/action-discord@master
      env:
        DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
      with:
        args: '🚀 Virtual Building Empire has been deployed to production! 🎮'
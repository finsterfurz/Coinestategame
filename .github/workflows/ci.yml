name: 🚀 Virtual Building Empire CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '18.x'
  CACHE_KEY: 'node-modules'

jobs:
  # 🧪 Test Job
  test:
    name: 🧪 Test Suite
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [16.x, 18.x, 20.x]
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        
      - name: 🟢 Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
          
      - name: 📦 Install dependencies
        run: |
          npm ci
          npm run prepare
          
      - name: 🔧 Compile contracts
        run: npm run compile
        
      - name: 🧪 Run frontend tests
        run: npm test -- --coverage --watchAll=false
        
      - name: 🔒 Run contract tests
        run: npm run test:contracts
        
      - name: 📊 Generate coverage report
        run: npm run coverage
        
      - name: ⬆️ Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          file: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: true

  # 🔍 Code Quality Job
  quality:
    name: 🔍 Code Quality
    runs-on: ubuntu-latest
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        
      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: 📦 Install dependencies
        run: npm ci
        
      - name: 🔧 Compile contracts
        run: npm run compile
        
      - name: 🧹 Run ESLint
        run: npm run lint
        
      - name: ✨ Check Prettier formatting
        run: npm run format:check
        
      - name: 🔒 Run security audit
        run: npm audit --audit-level high
        
      - name: 📊 Analyze bundle size
        run: |
          npm run build
          npm run analyze -- --non-interactive

  # 🏗️ Build Job
  build:
    name: 🏗️ Build Application
    runs-on: ubuntu-latest
    needs: [test, quality]
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        
      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: 📦 Install dependencies
        run: npm ci
        
      - name: 🔧 Compile contracts
        run: npm run compile
        
      - name: 🏗️ Build application
        run: npm run build
        env:
          CI: false # Treat warnings as warnings, not errors
          GENERATE_SOURCEMAP: false
          
      - name: 📦 Archive build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build-files
          path: build/
          retention-days: 7

  # 🔒 Security Job
  security:
    name: 🔒 Security Analysis
    runs-on: ubuntu-latest
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        
      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: 📦 Install dependencies
        run: npm ci
        
      - name: 🔧 Compile contracts
        run: npm run compile
        
      - name: 🔍 Run Slither analysis
        uses: crytic/slither-action@v0.3.0
        continue-on-error: true
        with:
          node-version: ${{ env.NODE_VERSION }}
          
      - name: 🔒 Run Mythril analysis
        continue-on-error: true
        run: |
          pip3 install mythril
          myth analyze contracts/ --execution-timeout 300 || true
          
      - name: 📊 Contract size analysis
        run: npm run size-contracts

  # 🚀 Deploy Job (only on main branch)
  deploy:
    name: 🚀 Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build, security]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    environment:
      name: staging
      url: https://staging.virtualbuilding.game
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        
      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: 📦 Install dependencies
        run: npm ci
        
      - name: 🏗️ Build for production
        run: npm run build
        env:
          CI: false
          REACT_APP_CHAIN_ID: ${{ secrets.REACT_APP_CHAIN_ID }}
          REACT_APP_RPC_URL: ${{ secrets.REACT_APP_RPC_URL }}
          REACT_APP_CHARACTER_CONTRACT_ADDRESS: ${{ secrets.REACT_APP_CHARACTER_CONTRACT_ADDRESS }}
          REACT_APP_LUNC_TOKEN_CONTRACT_ADDRESS: ${{ secrets.REACT_APP_LUNC_TOKEN_CONTRACT_ADDRESS }}
          REACT_APP_MARKETPLACE_CONTRACT_ADDRESS: ${{ secrets.REACT_APP_MARKETPLACE_CONTRACT_ADDRESS }}
          
      - name: 📤 Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: build-files
          path: build/
          
      - name: 🚀 Deploy to Vercel
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          github-token: ${{ secrets.GITHUB_TOKEN }}
          vercel-org-id: ${{ secrets.ORG_ID }}
          vercel-project-id: ${{ secrets.PROJECT_ID }}
          working-directory: ./

  # 📦 Contract Deployment Job (manual trigger)
  deploy-contracts:
    name: 📦 Deploy Smart Contracts
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch'
    
    environment:
      name: mainnet
      url: https://etherscan.io
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        
      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: 📦 Install dependencies
        run: npm ci
        
      - name: 🔧 Compile contracts
        run: npm run compile
        
      - name: 🧪 Run contract tests
        run: npm run test:contracts
        
      - name: 📊 Generate gas report
        run: npm run gas-report
        
      - name: 🚀 Deploy to mainnet
        run: npm run deploy:mainnet
        env:
          PRIVATE_KEY: ${{ secrets.PRIVATE_KEY }}
          INFURA_PROJECT_ID: ${{ secrets.INFURA_PROJECT_ID }}
          ETHERSCAN_API_KEY: ${{ secrets.ETHERSCAN_API_KEY }}
          
      - name: ✅ Verify contracts
        run: npm run verify:mainnet
        env:
          ETHERSCAN_API_KEY: ${{ secrets.ETHERSCAN_API_KEY }}

  # 📊 Performance Job
  performance:
    name: 📊 Performance Analysis
    runs-on: ubuntu-latest
    needs: [build]
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        
      - name: 📤 Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: build-files
          path: build/
          
      - name: 🔍 Lighthouse CI
        uses: treosh/lighthouse-ci-action@v10
        with:
          configPath: './lighthouserc.json'
          uploadArtifacts: true
          temporaryPublicStorage: true
          
      - name: 📊 Bundle size analysis
        run: |
          npm install -g bundlephobia-cli
          npx bundlephobia package.json

  # 📱 Mobile Testing Job
  mobile-test:
    name: 📱 Mobile Compatibility
    runs-on: ubuntu-latest
    needs: [build]
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        
      - name: 📤 Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: build-files
          path: build/
          
      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          
      - name: 📦 Install Playwright
        run: |
          npm install -g @playwright/test
          npx playwright install --with-deps
          
      - name: 🧪 Run mobile tests
        run: npx playwright test --config=playwright.mobile.config.js
        
      - name: 📊 Upload test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: mobile-test-results
          path: test-results/
          retention-days: 7

  # 🔔 Notification Job
  notify:
    name: 🔔 Notify Team
    runs-on: ubuntu-latest
    needs: [deploy, performance, mobile-test]
    if: always()
    
    steps:
      - name: 📧 Send Discord notification
        uses: sarisia/actions-status-discord@v1
        if: always()
        with:
          webhook: ${{ secrets.DISCORD_WEBHOOK }}
          title: "Virtual Building Empire CI/CD"
          description: "Deployment pipeline completed"
          color: ${{ job.status == 'success' && '0x00ff00' || '0xff0000' }}
          
      - name: 📱 Send Slack notification
        uses: 8398a7/action-slack@v3
        if: always()
        with:
          status: ${{ job.status }}
          channel: '#virtual-building-empire'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

# 🔐 Security Configuration
permissions:
  contents: read
  security-events: write
  actions: read
  checks: write
  deployments: write
  issues: write
  packages: write
  pull-requests: write
  repository-projects: write
  statuses: write

# 📊 Job concurrency
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true